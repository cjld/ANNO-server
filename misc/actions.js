// Generated by LiveScript 1.4.0
(function(){
  var alt, Actions, MyActions, importExist, createMainActions, ref$, actions, store, BasicStore, SubStore, subStore;
  alt = require('alt');
  alt = new alt;
  Actions = (function(){
    Actions.displayName = 'Actions';
    var prototype = Actions.prototype, constructor = Actions;
    function Actions(){
      this.generateActions(['doSetStore']);
      this.depMap = {};
      this.depFuncs = [];
      this.genDep(['a', 'b'], function(data){
        if (data.a != null && data.b != null) {
          return {
            c: data.a + data.b
          };
        }
      });
      this.genDep(['c'], function(data){
        if (data.c != null) {
          return {
            d: data.c + 1
          };
        }
      });
    }
    prototype.setMainStore = function(mainStore){
      this.store = mainStore;
      return 0;
    };
    prototype.genDep = function(depVals, func){
      var funcId, i$, len$, i;
      this.depFuncs.push(func);
      funcId = this.depFuncs.length - 1;
      for (i$ = 0, len$ = depVals.length; i$ < len$; ++i$) {
        i = depVals[i$];
        if (!this.depMap[i]) {
          this.depMap[i] = [funcId];
        } else {
          this.depMap[i].push(funcId);
        }
      }
      return 0;
    };
    prototype.setStore = function(it){
      var callIds, k, i$, ref$, len$, i, data, mergeData, newdata;
      this.doSetStore(it);
      callIds = {};
      for (k in it) {
        if (!this.depMap[k]) {
          continue;
        }
        for (i$ = 0, len$ = (ref$ = this.depMap[k]).length; i$ < len$; ++i$) {
          i = ref$[i$];
          callIds[i] = true;
        }
      }
      if (this.store == null) {
        throw "please set-main-store first.";
      }
      data = this.store.getState();
      mergeData = {};
      for (i in callIds) {
        newdata = this.depFuncs[i](data);
        import$(mergeData, newdata);
      }
      if (!deepEq$(mergeData, {}, '===')) {
        this.setStore(mergeData);
      }
      return it;
    };
    return Actions;
  }());
  MyActions = (function(superclass){
    var prototype = extend$((import$(MyActions, superclass).displayName = 'MyActions', MyActions), superclass).prototype, constructor = MyActions;
    function MyActions(){
      MyActions.superclass.apply(this, arguments);
      console.log('my-actions-work');
    }
    return MyActions;
  }(Actions));
  importExist = function(a, b){
    var updated, k, v;
    updated = false;
    for (k in b) {
      v = b[k];
      if (a[k] != null) {
        a[k] = v;
        updated = true;
      }
    }
    return updated;
  };
  createMainActions = function(alt, actionsClass, defaultValues){
    var actions, BasicStore, Store, store;
    actions = alt.createActions(MyActions);
    console.log(actions);
    console.log(actions.setStore);
    BasicStore = (function(){
      BasicStore.displayName = 'BasicStore';
      var prototype = BasicStore.prototype, constructor = BasicStore;
      function BasicStore(){
        this.bindActions(actions);
      }
      prototype.importInitial = function(mainStore, keys){
        var data, i$, len$, i;
        data = mainStore.getState();
        for (i$ = 0, len$ = keys.length; i$ < len$; ++i$) {
          i = keys[i$];
          if (data[i] != null) {
            this[i] = data[i];
          } else {
            throw "No such key: " + i;
          }
        }
      };
      prototype.onDoSetStore = function(it){
        return importExist(this, it);
      };
      return BasicStore;
    }());
    Store = (function(superclass){
      var prototype = extend$((import$(Store, superclass).displayName = 'Store', Store), superclass).prototype, constructor = Store;
      function Store(){
        Store.superclass.apply(this, arguments);
        import$(this, defaultValues);
      }
      return Store;
    }(BasicStore));
    store = alt.createStore(Store);
    actions.setMainStore(store);
    return {
      actions: actions,
      store: store,
      BasicStore: BasicStore,
      Store: Store
    };
  };
  ref$ = createMainActions(alt, MyActions, {
    a: 0,
    b: 1,
    c: -1,
    d: -2
  }), actions = ref$.actions, store = ref$.store, BasicStore = ref$.BasicStore;
  SubStore = (function(superclass){
    var prototype = extend$((import$(SubStore, superclass).displayName = 'SubStore', SubStore), superclass).prototype, constructor = SubStore;
    function SubStore(){
      SubStore.superclass.apply(this, arguments);
      this.importInitial(store, ['a', 'b']);
    }
    return SubStore;
  }(BasicStore));
  subStore = alt.createStore(SubStore);
  store.listen(function(it){
    return console.log("store:", it);
  });
  subStore.listen(function(it){
    return console.log("sub-store:", it);
  });
  actions.setStore({
    a: 1
  });
  actions.setStore({
    a: 2
  });
  actions.setStore({
    b: 3
  });
  function import$(obj, src){
    var own = {}.hasOwnProperty;
    for (var key in src) if (own.call(src, key)) obj[key] = src[key];
    return obj;
  }
  function deepEq$(x, y, type){
    var toString = {}.toString, hasOwnProperty = {}.hasOwnProperty,
        has = function (obj, key) { return hasOwnProperty.call(obj, key); };
    var first = true;
    return eq(x, y, []);
    function eq(a, b, stack) {
      var className, length, size, result, alength, blength, r, key, ref, sizeB;
      if (a == null || b == null) { return a === b; }
      if (a.__placeholder__ || b.__placeholder__) { return true; }
      if (a === b) { return a !== 0 || 1 / a == 1 / b; }
      className = toString.call(a);
      if (toString.call(b) != className) { return false; }
      switch (className) {
        case '[object String]': return a == String(b);
        case '[object Number]':
          return a != +a ? b != +b : (a == 0 ? 1 / a == 1 / b : a == +b);
        case '[object Date]':
        case '[object Boolean]':
          return +a == +b;
        case '[object RegExp]':
          return a.source == b.source &&
                 a.global == b.global &&
                 a.multiline == b.multiline &&
                 a.ignoreCase == b.ignoreCase;
      }
      if (typeof a != 'object' || typeof b != 'object') { return false; }
      length = stack.length;
      while (length--) { if (stack[length] == a) { return true; } }
      stack.push(a);
      size = 0;
      result = true;
      if (className == '[object Array]') {
        alength = a.length;
        blength = b.length;
        if (first) {
          switch (type) {
          case '===': result = alength === blength; break;
          case '<==': result = alength <= blength; break;
          case '<<=': result = alength < blength; break;
          }
          size = alength;
          first = false;
        } else {
          result = alength === blength;
          size = alength;
        }
        if (result) {
          while (size--) {
            if (!(result = size in a == size in b && eq(a[size], b[size], stack))){ break; }
          }
        }
      } else {
        if ('constructor' in a != 'constructor' in b || a.constructor != b.constructor) {
          return false;
        }
        for (key in a) {
          if (has(a, key)) {
            size++;
            if (!(result = has(b, key) && eq(a[key], b[key], stack))) { break; }
          }
        }
        if (result) {
          sizeB = 0;
          for (key in b) {
            if (has(b, key)) { ++sizeB; }
          }
          if (first) {
            if (type === '<<=') {
              result = size < sizeB;
            } else if (type === '<==') {
              result = size <= sizeB
            } else {
              result = size === sizeB;
            }
          } else {
            first = false;
            result = size === sizeB;
          }
        }
      }
      stack.pop();
      return result;
    }
  }
  function extend$(sub, sup){
    function fun(){} fun.prototype = (sub.superclass = sup).prototype;
    (sub.prototype = new fun).constructor = sub;
    if (typeof sup.extended == 'function') sup.extended(sub);
    return sub;
  }
}).call(this);
